---
title: "données_O.moub"
output:
  pdf_document: default
  html_document: default
date: "2024-03-19"
---

## 1. Setup

Load all necessary packages :

```{r Packages}
library(readxl)
library(survival)
library(ggplot2)
library(survival)
library(lme4)
library(nlme)
library(dplyr)
library(survminer)
library(Matrix)
library(PMCMRplus)
library(dunn.test)
library(AER)
library(DHARMa)
library(pwr)
library(magrittr)
library(stringr)
library(FSA)
library(rcompanion)
library(sjPlot)
library(RColorBrewer)
```

set working directory, load necessay files.

```{r Setup}
setwd("C:/Users/2024mb002/Downloads")
data <- Daily_tick_monitoring
colnames(data)[colnames(data) == "Treatment_ul/ml"] <- "Treatment_ul"
numeric_data <- data[, sapply(data, is.numeric)]
data$Trt_categ <- as.factor(data$Trt_categ)
str(data)
```

Ajout d'une colone avec des catégories pour les doses réelles. La derniere catégorie va jusqu'a 0.11 car la dose max est 0.10087 et je voulais l'inclure.


## 2. Normality tests 

I performed a Shapiro-Wilk test for each numerical variable : 

```{r Shapiro-Wilk}
shapiro_results <- apply(numeric_data, 2, shapiro.test)
shapiro_results
```

Below, all data will be tested with a Kruska-Wallis test: a non-parametric test to see if there are significant differences between groups.

Survival (survival and survival time), molt (molt success and molt time), blood meal size and molt length are tested. Each variable will be analyzed according to the treatment, but also according to the actual mercury dose in relation to the blood meal size (= realized dose).

if the Kruskal test shows a significant difference, we'll need to determine between which groups. To do this, I've performed Dunn's multiple comparison tests. Each test will be performed as needed in its corresponding sub-section.

the following analyses are performed in mixed models with the plate effect randomized

## 3. Survival analysis

#kruskal

```{r Kruskal-Wallis survie}
kruskal.test(Survived ~ Treatment_ul, data = data)
kruskal.test(Survived ~ Realised_dose, data = data)
```

#Treatement

```{r Dunn survived depending on the treatment }
dunn_Survived <- dunn.test(data$Survived, data$Treatment_ul)
print("Dunn's test results for Survived:")
print(dunn_Survived)
```

```{r Survival ~ treatement}
survie <- glmer(Survived ~ Treatment_ul + (1 | Plaque), 
               family = binomial,
               data = data)
survie_null <- glmer(Survived ~ 1 + (1 | Plaque), 
               family = binomial,
               data = data)
print(survie)
anova(survie, survie_null)
AIC(survie)
AIC(survie_null)

simulateResiduals(survie, plot = TRUE)

```

```{r : Plot survival ~ treatement}
s <- ggplot(data, aes(x = Trt_categ, fill = factor(Survived))) +
  geom_bar(position = "fill", stat = "count") +
  labs(fill = "Survival",
       x = "MeHg treatment dose (ul/ml)",
       y = "Proportion of ticks") +
  scale_fill_manual(values = c("0" = "grey", "1" = "#df91a3"), 
                    labels = c("Died", "Survived")) +
  scale_x_discrete(labels = c("0", "0.76", "3.8", "7.6", "38")) + 
  theme(panel.grid.minor = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(colour = "gray25", size = 1),
        axis.ticks = element_line(colour = "gray25", size = 1),
        legend.position = "right", 
        legend.title = element_text(size = 16),
        axis.title.x = element_text(size = 13, color = "gray25"),
        axis.title.y = element_text(size = 13, color = "gray25"),
        legend.text = element_text(size = 14), 
        legend.key = element_rect(fill = 'white'),
        axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
        axis.text.y = element_text(color = "gray25", size = 10))
s
```

#Realized dose

```{r survival ~ realised_dose}
survR <- glmer(Survived ~ Realised_dose + (1 | Plaque), 
               family = binomial,
               data = data)
survR_null <- glmer(Survived ~ 1 + (1 | Plaque), 
               family = binomial,
               data = data)
anova(survR, survR_null)
AIC(survR)
AIC(survR_null)
simulateResiduals(survR, plot = TRUE)
```

## 4. Survival time analysis

#kruskal

```{r Kruskal-Wallis survival time}
kruskal.test(Survival_time ~ Treatment_ul, data = data)
kruskal.test(Survival_time ~ Realised_dose, data = data)
```

```{r dunn test}
dunn_tpsS <- dunn.test(data$Survival_time, data$Treatment_ul)
print("Dunn's test results for survival time:")
print(dunn_tpsS)
```

#Treatement

```{r : Survival de time ~ treatment}
survobj <- with(data, Surv(Survival_time,Survived2))
survtest <- coxph(survobj~Treatment_ul,
  data=numeric_data)
survtest
cox.zph(survtest)
survdiff(survobj~Treatment_ul, data=numeric_data)

survtest <- coxph(survobj~Trt_categ,
  data=numeric_data)
survtest
cox.zph(survtest)
survdiff(survobj~Trt_categ, data=numeric_data)
```

#dose réelle

```{r : Survival de time ~ realized dose}
survobj2 <- with(data, Surv(Survival_time,Survived2))
survtest2 <- coxph(survobj~Realised_dose,
  data=data)
survtest2
cox.zph(survtest)
survdiff(survobj2~Realised_dose, data=numeric_data)
```

pour dose réelle changer le type de graphique car trop d'info, faire une courbe ?

```{r Kaplan-Meier survival graph}
fit <- survfit(Surv(Survival_time, Survived2) ~ Trt_categ, data = data)

# survival curve 
ggsurvplot(fit, 
           data = data, 
           pval = FALSE,  
           conf.int = FALSE, 
           legend.title = "Treatment",  
           risk.table = FALSE,  
           xlab = "Time (days)",  
           ylab = "Survival proportion",  
           ggtheme = theme(panel.background = element_rect(fill = 'white'),            panel.grid.major = element_line(colour = "gray80"),
           panel.grid.minor = element_line(colour = "gray80"),
           axis.line = element_line(colour = "gray25", size = 1),
           axis.ticks = element_line(colour = "gray25", size = 1),
           legend.position = "right", 
           legend.title = element_text(size = 16),
           axis.title.x = element_text(size = 13, color = "gray25"),
           axis.title.y = element_text(size = 13, color = "gray25"),
           legend.text = element_text(size = 14), 
           legend.key = element_rect(fill = 'white'),
           axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
           axis.text.y = element_text(color = "gray25", size = 10)), 
           palette =  c("darkgreen", "khaki4", "#d0d3a2", "palegreen4", "olivedrab3"), 
           legend.labs= c("0", "0.76", "3.8", "7.6", "38"))
```

## 5. Molting success analysis 

#kruskal

```{r Kruskal-Wallis molt}
kruskal.test(Mue ~ Treatment_ul, data = data)
kruskal.test(Mue ~ Realised_dose, data = data)
```

#Treatement

```{r dunn test treatment}
dunn_Mue <- dunn.test(data$Mue, data$Treatment_ul)
print("Dunn's test results for Mue:")
print(dunn_Mue)
```

```{r Molt ~ treatement}
model_mue <- glmer(Mue ~ Treatment_ul + (1 | Plaque), 
               family = binomial,
               data = data)
model_mue_null <- glmer(Mue ~ 1 + (1 | Plaque), 
               family = binomial,
               data = data)
anova(model_mue, model_mue_null)
AIC(model_mue)
AIC(model_mue_null)
```

```{r plot molting sucess depending on the treatment}
ggplot(data, aes(x = Trt_categ, fill = factor(Mue))) +
  geom_bar(position = "fill", stat = "count") +
  labs(fill = "Molting success",
       x = "MeHg treatment dose (ul/ml)",
       y = "Proportion of ticks") +
  scale_fill_manual(values = c("0" = "#d0d3a2", "1" = "#798234"), 
                    labels = c("Molted", "Did not molt")) +
  scale_x_discrete(labels = c("0", "0.76", "3.8", "7.6", "38")) + 
  theme(panel.grid.minor = element_blank(),
        panel.background = element_blank(),
        axis.line = element_line(colour = "gray25", size = 1),
        axis.ticks = element_line(colour = "gray25", size = 1),
        legend.position = "right", 
        legend.title = element_text(size = 16),
        axis.title.x = element_text(size = 13, color = "gray25"),
        axis.title.y = element_text(size = 13, color = "gray25"),
        legend.text = element_text(size = 14), 
        legend.key = element_rect(fill = 'white'),
        axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
        axis.text.y = element_text(color = "gray25", size = 10))
```

#Realized dose

```{r dunn test realized dose}
dunn_Mue <- dunn.test(data$Mue, data$Realised_dose)
print("Dunn's test results for Mue:")
print(dunn_Mue)
```

```{r Molt ~ realized dose}
model_mue2 <- glmer(Mue ~ Realised_dose + (1 | Plaque), 
               family = binomial,
             data = data)

model_mue2_null <- glmer(Mue ~ 1 + (1 | Plaque), 
               family = binomial,
             data = data)

anova(model_mue2, model_mue2_null)

AIC(model_mue2)
AIC(model_mue2_null)

simulateResiduals(model_mue2, plot = TRUE)
```


## 6.  Molting ime Analysis 

#kruskal

```{r Kruskal-Wallis molting time}
kruskal.test(Time_to_moult ~ Treatment_ul, data = data)
kruskal.test(Time_to_moult ~ Realised_dose, data = data)
```

#Treatement

```{r Molting time ~ treatement}
model_tps_mue <- glmer(log(Time_to_moult) ~ Treatment_ul + (1 | Plaque), 
             data = data, family = gaussian(link = "log"))

model_tps_mue_null <- glmer(log(Time_to_moult) ~ 1 + (1 | Plaque), 
             data = data, family = gaussian(link = "log"))

anova(model_tps_mue, model_tps_mue_null)

hist(data$Time_to_moult)

simulateResiduals(model_tps_mue, plot = TRUE)
```

#Realized dose

```{r molting time ~ realized dose}
model_tps_mue_DR <- glmer(log(Time_to_moult) ~ Realised_dose + (1 | Plaque), data = data, family = gaussian)

model_tps_mue_DR_null <- glmer(log(Time_to_moult) ~ 1 + (1 | Plaque),
             data = data, family = gaussian)

anova(model_tps_mue_DR, model_tps_mue_DR_null)

simulateResiduals(model_tps_mue_DR, plot = TRUE)
```


```{r ggplot time molt ~ teatment}
ggplot(data, aes(x= Trt_categ, y= Time_to_moult, fill=Trt_categ)) +
  geom_boxplot() +
  geom_point() +
  labs(x = "Treatment",
       y = "Time to molt (days)")+ 
scale_fill_manual(values=c("darkgreen", "khaki4", "#d0d3a2", "palegreen4", "olivedrab3")) +
  scale_x_discrete(labels = c("0", "0.76", "3.8", "7.6", "38")) +
  theme(panel.background = element_rect(fill = 'white'),
        panel.grid.major = element_line(colour = "gray90"),
        panel.grid.minor = element_line(colour = "gray90"),
        axis.line = element_line(colour = "gray25", size = 1),
        axis.ticks = element_line(colour = "gray25", size = 1),
        legend.position = "none", 
        legend.title = element_text(size = 16),
        axis.title.x = element_text(size = 13, color = "gray25"),
        axis.title.y = element_text(size = 13, color = "gray25"),
        legend.text = element_text(size = 14), 
        legend.key = element_rect(fill = 'white'),
        axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
        axis.text.y = element_text(color = "gray25", size = 10))
```

## 7. Blood meal size Analysis 

The blood meal size will only be analyzed with the treatment as the realized dose was calculated based on the blood meal size 

#kruskal

```{r Kruskal-Wallis bloodmeal size}
kruskal.test(Bloodmeal_size ~ Treatment_ul, data = data)
```
#model

```{r Bloodmeal size}

model4 <- glmer(Bloodmeal_size2 ~ Treatment_ul + (1 | Plaque), 
             data = data, family = gaussian)

model4null <- glmer(Bloodmeal_size2 ~ 1 + (1 | Plaque), 
             data = data, family = gaussian)

anova(model4, model4null)

AIC(model4)

AIC(model4null)

hist(data$Bloodmeal_size2)

simulateResiduals(model4)
```

## 8. Relative size analysis

```{r kruskal wallis taille mue}
kruskal.test(Ratio_long ~ Treatment_ul, data = data)
kruskal.test(Ratio_long ~ Realised_dose, data = data)
```

```{r dunn taille mue}
dunn_Mue <- dunn.test(data$Ratio_long, data$Treatment_ul)
print("Dunn's test results for molt size:")
print(dunn_Survived)
```

#Treatement

```{r relative size ~ treatment}
hist(data$Ratio_long)

ratiolong1 <- glmer(Ratio_long ~ Treatment_ul + (1 | Plaque), 
              data = data, family = gaussian)

ratiolongnull <- glmer(Ratio_long ~ 1 + (1 | Plaque), 
              data = data, family = gaussian)

anova(ratiolong1, ratiolongnull)

AIC(ratiolong1)
AIC(ratiolongnull)

tab_model(ratiolong1, ratiolongnull, string.est="IRR", show.aicc=TRUE, digits=2, show.ci=FALSE, show.intercept=FALSE)

simulateResiduals(ratiolong1, plot = TRUE)
```

```{r ggplot relative size}
ggplot(data, aes(x = Trt_categ, y = Ratio_long, fill = Trt_categ)) +
  geom_boxplot(alpha = 1) +
  geom_point() +
  labs(x = "MeHg treatment dose (ul/ml)",
       y = "Relative size (mm)") +
  scale_fill_manual(values=c("darkgreen", "khaki4", "#d0d3a2", "palegreen4", "olivedrab3")) +
  scale_x_discrete(labels = c("0", "0.76", "3.8", "7.6", "38")) +
  theme(panel.background = element_rect(fill = 'white'),
        panel.grid.major = element_line(colour = "gray90"),
        panel.grid.minor = element_line(colour = "gray90"),
        axis.line = element_line(colour = "gray25", size = 1),
        axis.ticks = element_line(colour = "gray25", size = 1),
        legend.position = "none", 
        legend.title = element_text(size = 16),
        axis.title.x = element_text(size = 13, color = "gray25"),
        axis.title.y = element_text(size = 13, color = "gray25"),
        legend.text = element_text(size = 14), 
        legend.key = element_rect(fill = 'white'),
        axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
        axis.text.y = element_text(color = "gray25", size = 10))
```

# Realized dose

```{r Relative size ~ realized dose}
ratiolong3 <- glmer(Ratio_long ~ Realised_dose + (1 | Plaque), 
             data = data, family = gaussian)

ratiolongnull3 <- glmer(Ratio_long ~ 1 + (1 | Plaque), 
              data = data, family = gaussian)

anova(ratiolong2, ratiolongnull)

simulateResiduals(ratiolong3, plot = TRUE)
```

## Realised dose analysis  

```{r Realized dose ~ treatment}
data_O <- data[-which(data$Realised_dose=="0"),]

shapiro.test(data_O$Realised_dose)
hist(data_O$Realised_dose)

realised_dose_max <- glmer(Realised_dose ~ Treatment_ul + (1 | Plaque), 
              data = data_O, family = Gamma(link = "logit"))
realised_dose_min <- glmer(Realised_dose ~ 1 + (1 | Plaque), 
              data = data_O, family = Gamma(link = "logit"))
anova(realised_dose_max, realised_dose_min)
AIC(realised_dose_max)
AIC(realised_dose_min)

simulateResiduals(realised_dose_max, plot = TRUE)

tab_model(realised_dose_max, realised_dose_min, string.est="IRR", show.aicc=TRUE, digits=2, show.ci=FALSE, show.intercept=FALSE)
```

```{r Kruskal and Dunn}
kruskal.test(Realised_dose ~ Treatment_ul, data = data)

dunn_dose_reelle <- dunn.test(data$Realised_dose, data$Treatment_ul)
print("Dunn's test results for realised dose:")
print(dunn_dose_reelle)
```

```{r Plot realized dose ~ treatement}
ggplot(data, aes(x = Trt_categ, y = Realised_dose, fill = Trt_categ)) +
  geom_boxplot(alpha = 1) +
  geom_point() +
  labs(x = "MeHg treatment dose (ul/ml)",
       y = "Realized dose (ul/ml)") +
  scale_fill_manual(values=c("darkgreen", "khaki4", "#d0d3a2", "palegreen4", "olivedrab3")) +
  scale_x_discrete(labels = c("0", "0.76", "3.8", "7.6", "38")) +
  theme(panel.background = element_rect(fill = 'white'),
        panel.grid.major = element_line(colour = "gray90"),
        panel.grid.minor = element_line(colour = "gray90"),
        axis.line = element_line(colour = "gray25", size = 1),
        axis.ticks = element_line(colour = "gray25", size = 1),
        legend.position = "none", 
        legend.title = element_text(size = 16),
        axis.title.x = element_text(size = 13, color = "gray25"),
        axis.title.y = element_text(size = 13, color = "gray25"),
        legend.text = element_text(size = 14), 
        legend.key = element_rect(fill = 'white'),
        axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
        axis.text.y = element_text(color = "gray25", size = 10))
```
