---
title: "données_O.moub"
output:
  pdf_document: default
  html_document: default
date: "2024-03-19"
---

mon doc est à moitié en anglais à moitié en francais dsl jsp dans quelle langue le faire mais je pense tout changer pour l'anglais si j'ai le temps vu que je voulais le partager dans mon rapport. 

##        1. Setup

Charger les packages nécessaires:

```{r packages}
library(readxl)
library(survival)
library(ggplot2)
library(survival)
library(lme4)
library(nlme)
library(dplyr)
library(survminer)
library(Matrix)
library(PMCMRplus)
library(dunn.test)
library(AER)
library(DHARMa)
library(pwr)
library(magrittr)
library(stringr)
```

set working directory, charger les fichiers necessaires : utiliser le fichier "General recap O.moub". Création d'un ficher avec les données numériques uniquement :

```{r setup}
setwd("C:/Users/2024mb002/Downloads")
data <- Daily_tick_monitoring
colnames(data)[colnames(data) == "Treatment_ul/ml"] <- "Treatment_ul"
numeric_data <- data[, sapply(data, is.numeric)]
```

Ajout d'une colone avec des catégories pour les doses réelles. La derniere catégorie va jusqu'a 0.11 car la dose max est 0.10087 et je voulais l'inclure. 

```{r}
data <- data %>%
  mutate(Realised_dose_class = case_when(
    Realised_dose >= 0 & Realised_dose < 0.02 ~ 0,
    Realised_dose >= 0.02 & Realised_dose < 0.04 ~ 0.02,
    Realised_dose >= 0.04 & Realised_dose < 0.06 ~ 0.04,
    Realised_dose >= 0.06 & Realised_dose < 0.08 ~ 0.06,
    Realised_dose >= 0.08 & Realised_dose <= 0.11 ~ 0.08,
  ))
```


##            2. Test de la normalité des echantillons 

  test de Shapiro-Wilk pour chaque variable numérique : 
  
```{r Shapiro-Wilk}
shapiro_results <- apply(numeric_data, 2, shapiro.test)
shapiro_results
```

Plus bas, toutes les données seront testé avec un test de kruska-wallis : un test non parametrique pour voir signif entre les groupes.

on test la survie (survie et temps de survie), la mue (succès de mue et temps de mue), la taille du repas sanguin et la longueur de la mue. Chaque donnée sera analysé en fonction du traitement mais aussi en fonction de la dose réel de mercure par rapport au repas sanguin size (= dose réelle)

si signif, besoin de determiner quel groupes : test de comparaison multiple de Dunn, chaque test sera fait au besoin dans sa sous partie correspondante  
  

les analyses suivantes sont faites en modèles mixte avec l'effet plaque en aléatoire

##        3. Analyse survie 

#kruskal 
  
```{r Kruskal-Wallis survie}
kruskal.test(Survived ~ Treatment_ul, data = data)
kruskal.test(Survived ~ Realised_dose, data = data)
kruskal.test(Survived ~ Realised_dose_class, data = data)
```

#traitement 

```{r Dunn survived depending on the treatment }
dunn_Survived <- dunn.test(data$Survived, data$Treatment_ul)
print("Dunn's test results for Survived:")
print(dunn_Survived)
```

```{r survie~traitement}
survie <- glmer(Survived ~ Treatment_ul + (1 | Plaque), 
               family = binomial,
               data = data)
survie_null <- glmer(Survived ~ 1 + (1 | Plaque), 
               family = binomial,
               data = data)
anova(survie, survie_null)
```
```{r : graph survie en fct traitement}
data$Treatment_ul <- as.factor(data$Treatment_ul)
ggplot(data, aes(x = Treatment_ul, fill = factor(Survived))) +
  geom_bar(position = "fill", stat = "count") +
  labs(x = "Treatment",
       y = "Number of ticks") +
  scale_fill_manual(values = c("0" = "lightpink2", "1" = "palegreen4"), 
                    labels = c("Died", "Survived")) +
  theme_minimal()
```

#dose réelle 

```{r Dunn survived depending on the realized dose class }
dunn_Survived <- dunn.test(data$Survived, data$Realised_dose_class)
print("Dunn's test results for Survived:")
print(dunn_Survived)
```

```{r survie~realised_dose}
survR <- glmer(Survived ~ Realised_dose_class + (1 | Plaque), 
               family = binomial,
               data = data)
survR_null <- glmer(Survived ~ 1 + (1 | Plaque), 
               family = binomial,
               data = data)
anova(survR, survR_null)
```

```{r : graph survie en fct dose réelle}
data$Realised_dose_class <- as.factor(data$Realised_dose_class)
ggplot(data, aes(x = Realised_dose_class, fill = factor(Survived))) +
  geom_bar(position = "fill", stat = "count") +
  labs(x = "Realized contaminant dose",
       y = "Number of ticks") +
  scale_fill_manual(values = c("0" = "lightpink2", "1" = "palegreen4"), 
                    labels = c("Died", "Survived")) +
  theme_minimal()
```

##        4. Analyse temps de survie 

#kruskal 

```{r Kruskal-Wallis tps survie}
kruskal.test(Survival_time ~ Treatment_ul, data = data)
kruskal.test(Survival_time ~ Realised_dose, data = data)
kruskal.test(Survival_time ~ Realised_dose_class, data = data)
```
```{r dunn test}
dunn_tpsS <- dunn.test(data$Survival_time, data$Treatment_ul)
print("Dunn's test results for survival time:")
print(dunn_tpsS)
dunn_tpsS <- dunn.test(data$Survival_time, data$Realised_dose_class)
print("Dunn's test results for survival time:")
print(dunn_tpsS)
```

#traitement 

```{r : log temps de survie}
survobj <- with(data, Surv(Survival_time,Survived2))
survtest <- coxph(survobj~Treatment_ul,
  data=numeric_data)
survtest
cox.zph(survtest)
survdiff(survobj~Treatment_ul, data=numeric_data)
```

#dose réelle

```{r : log temps de survie}
survobj2 <- with(data, Surv(Survival_time,Survived2))
survtest2 <- coxph(survobj~Realised_dose,
  data=data)
survtest2
cox.zph(survtest)
survdiff(survobj2~Realised_dose, data=numeric_data)
```

pour dose réelle changer le type de graphique car trop d'info, faire une courbe ? 

```{r courble tps survie Kaplan-Meier}
fit <- survfit(Surv(Survival_time, Survived2) ~ Trt_categ, data = data)

# Tracé du graphique de survie
ggsurvplot(fit, 
           data = data, 
           pval = FALSE,  
           conf.int = FALSE, 
           legend.title = "Treatment",  
           risk.table = FALSE,  # Afficher le tableau de risque
           xlab = "Time",  
           ylab = "Survival proportion",  
           ggtheme = theme_minimal()) 
```

##            5. Analyse succès de mue 

#kruskal 

```{r Kruskal-Wallis mue}
kruskal.test(Mue ~ Treatment_ul, data = data)
kruskal.test(Mue ~ Realised_dose, data = data)
kruskal.test(Mue ~ Realised_dose_class, data = data)
```

#traitement 

```{r dunn test treatment}
dunn_Mue <- dunn.test(data$Mue, data$Treatment_ul)
print("Dunn's test results for Mue:")
print(dunn_Mue)
```


```{r mue~traitement}
model_mue <- glmer(Mue ~ Treatment_ul + (1 | Plaque), 
               family = binomial,
               data = data)
model_mue_null <- glmer(Mue ~ 1 + (1 | Plaque), 
               family = binomial,
               data = data)
anova(model_mue, model_mue_null)
```
plaque NA ? ca veut dire quoi ? 

```{r plot molting sucess depending on the treatment}
data$Treatment_ul <- as.factor(data$Treatment_ul)
ggplot(data, aes(x = Treatment_ul, fill = factor(Mue))) +
  geom_bar(position = "fill", stat = "count") +
  labs(x = "Treatment",
       y = "number of ticks") +
  scale_fill_manual(values = c("0" = "lightpink2", "1" = "palegreen4" ), 
                    labels = c("Did not molt", "Molted")) +
  theme_minimal() 
```

#dose réelle

```{r dunn test realized dose class}
dunn_Mue <- dunn.test(data$Mue, data$Realised_dose_class)
print("Dunn's test results for Mue:")
print(dunn_Mue)
```

```{r mue~dose réelle}
model_mue2 <- glmer(Mue ~ Realised_dose + (1 | Plaque), 
               family = binomial,
             data = data)
model_mue2_null <- glmer(Mue ~ 1 + (1 | Plaque), 
               family = binomial,
             data = data)
anova(model_mue2, model_mue2_null)
```
```{r plot molting sucess depending on the realized dose}
data$Realised_dose_class <- as.factor(data$Realised_dose_class)
ggplot(data, aes(x = Realised_dose_class, fill = factor(Mue))) +
  geom_bar(position = "fill", stat = "count") +
  labs(x = "Realized contaminant dose",
       y = "number of ticks") +
  scale_fill_manual(values = c("0" = "lightpink2", "1" = "palegreen4" ), 
                    labels = c("Did not molt", "Molted")) +
  theme_minimal() 
```

##            6. Analyse temps de mue 

#kruskal 

```{r Kruskal-Wallis tps mue}
kruskal.test(Time_to_moult ~ Treatment_ul, data = data)
kruskal.test(Time_to_moult ~ Realised_dose, data = data)
kruskal.test(Time_to_moult ~ Realised_dose_class, data = data)
```

#traitement 

voir pour mettre une famille mais fit pas bien ? enle
```{r tps mue~traitement}
model_tps_mue <- glmer(log(Time_to_moult) ~ Treatment_ul + (1 | Plaque), 
             data = data)
model_tps_mue_null <- glmer(log(Time_to_moult) ~ 1 + (1 | Plaque), 
             data = data)
anova(model_tps_mue, model_tps_mue_null)
hist(data$Time_to_moult)
```
lmer car familly gaussian 
rajouter logit link ? 

```{r test overdispersion tps mue}
library(DHARMa)
simulateResiduals(model_tps_mue, plot = TRUE)
```

#dose réelle

```{r tps mue~dose réelle}
model_tps_mue <- glmer(log(Time_to_moult) ~ Realised_dose + (1 | Plaque),
             data = data)
model_tps_mue_dr <- glmer(log(Time_to_moult) ~ 1 + (1 | Plaque),
             data = data)
anova(model_tps_mue, model_tps_mue_dr)
```
utilization de lmer car family = gaussian, repetitif avec glmer 

```{r ggplot trt time molt}
ggplot(data, aes(x= Treatment_ul, y= Time_to_moult, fill=Treatment_ul)) +
  geom_point() +
  geom_boxplot(alpha=0.5) +
  labs(x = "Treatment",
       y = "Time to molt")+ 
  theme(plot.title = element_text(size = 9),
        legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) 
```


##            7. Analyse bloodmeal size en fonction traitement

#kruskal 

```{r Kruskal-Wallis bloodmeal size}
kruskal.test(Bloodmeal_size ~ Treatment_ul, data = data)
```

#model 

```{r Bloodmeal size}
model4 <- glmer(Bloodmeal_size2 ~ Realised_dose + (1 | Plaque), 
             data = data, family = gaussian)
model4null <- glmer(Bloodmeal_size2 ~ 1 + (1 | Plaque), 
             data = data, family = gaussian)
anova(model4, model4null)
hist(data$Bloodmeal_size2)
simulateResiduals(model4)
```
 

##        8. Analyse Longueure de mue 

impact sur l'augmentation de la taille, faire longueur et largeur séparé ? ou faire "superficie" ?
changer la famille du model ?

```{r kruskal wallis taille mue}
kruskal.test(Ratio_long ~ Treatment_ul, data = data)
kruskal.test(Ratio_long ~ Realised_dose, data = data)
```

```{r dunn taille mue}
dunn_Mue <- dunn.test(data$Ratio_long, data$Treatment_ul)
print("Dunn's test results for molt size:")
print(dunn_Survived)
```

#traitement

```{r ratio longueure trt}
ratiolong1 <- glmer(Ratio_long ~ Treatment_ul + (1 | Plaque), 
              data = data, family = gaussian)
ratiolongnull <- glmer(Ratio_long ~ 1 + (1 | Plaque), 
              data = data, family = gaussian)
anova(ratiolong1, ratiolongnull)
hist(data$Ratio_long)
```

# dose réelle

```{r ratio longueure dose}
ratiolong2 <- glmer(Ratio_long ~ Realised_dose + (1 | Plaque), 
             data = data, family = gaussian)
ratiolongnull <- glmer(Ratio_long ~ 1 + (1 | Plaque), 
              data = data, family = gaussian)
anova(ratiolong2, ratiolongnull)
```

```{r ratio longueure dose}
ratiolong <- glmer(Ratio_long ~ Treatment_ul + Long_bf_mue + (1 | Plaque), 
             data = data)
ratiolongbf <- glmer(Ratio_long ~ Treatment_ul + (1 | Plaque), 
             data = data)
anova(ratiolong, ratiolongbf)
```

axis.text.x = element_blank())

```{r ggplot ratio_long}
ggplot(data, aes(x= Treatment_ul, y= Ratio_long, fill=Treatment_ul)) +
  geom_point() +
  geom_boxplot(alpha=0.5) +
  labs(x = "Treatment",
       y = "Molt size")+ 
  theme(plot.title = element_text(size = 9),
        legend.position = "none",
         axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) 
```

## autre 

tentative de graph ? garder ou pas ? 
```{r}
attach(data)
plot(Realised_dose,Survival_time,pch=21,col="blue",bg="red")
plot(Realised_dose,Time_to_moult,pch=21,col="blue",bg="red")
```

