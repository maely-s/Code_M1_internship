---
title: "données_O.moub"
output:
  pdf_document: default
  html_document: default
date: "2024-03-19"
---

##        1. Setup

Charger les packages nécessaires:

```{r packages}
library(readxl)
library(survival)
library(ggplot2)
library(survival)
library(lme4)
library(nlme)
library(dplyr)
library(survminer)
library(Matrix)
library(PMCMRplus)
library(dunn.test)
library(AER)
library(DHARMa)
```

set working directory, charger les fichiers necessaires, créer un ficher avec les données numériques uniquement :

```{r setup}
setwd("C:/Users/2024mb002/Downloads")
data <- Daily_tick_monitoring
colnames(data)[colnames(data) == "Treatment_ul/ml"] <- "Treatment_ul"
numeric_data <- data[, sapply(data, is.numeric)]
```

##            2. Test de la normalité des echantillons 

  test de Shapiro-Wilk pour chaque variable numérique : 
  
```{r Shapiro-Wilk}
shapiro_results <- apply(numeric_data, 2, shapiro.test)
shapiro_results
```

Plus bas, toutes les données seront testé avec un test de kruska-wallis : un test non parametrique pour voir signif entre les groupes.
  
on test la survie (survie et temps de survie), la mue (succès de mue et temps de mue) et la taille du repas sanguin. Chaque donnée sera analysé en fonction du traitement mais aussi en fonction de la dose réel de mercure par rapport au repas sanguin size (= dose réelle)

  si signif, besoin de determiner quel groupes : test de comparaison multiple de Dunn (voir dans quelles parties le rajouter)
  
```{r Dunn}
dunn_Survived <- dunn.test(data$Survived, data$Treatment_ul)
print("Dunn's test results for Survived:")
print(dunn_Survived)

dunn_survival_time <- dunn.test(data$Survival_time, data$Treatment_ul)
print("Dunn's test results for Survival_time:")
print(dunn_survival_time)

dunn_Mue <- dunn.test(data$Mue, data$Treatment_ul)
print("Dunn's test results for Mue:")
print(dunn_Mue)
```

les analyses suivantes sont faites en modèles mixte avec l'effet plaque en aléatoire

##        3. Analyse survie 

#kruskal 
  
```{r Kruskal-Wallis survie}
kruskal.test(Survived ~ Treatment_ul, data = data)
kruskal.test(Survived ~ Realised_dose, data = data)
```

#traitement 

```{r survie~traitement}
survie <- glmer(Survived ~ Treatment_ul + (1 | Plaque), 
               family = binomial,
               data = data)
survie_null <- glmer(Survived ~ 1 + (1 | Plaque), 
               family = binomial,
               data = data)
anova(survie, survie_null)
```

#dose réelle 

```{r survie~realised_dose}
survR <- glmer(Survived ~ Realised_dose + (1 | Plaque), 
               family = binomial,
               data = data)
survR_null <- glmer(Survived ~ 1 + (1 | Plaque), 
               family = binomial,
               data = data)
summary(survR)
AIC(survR)
AIC(survR_null)
anova(survR, survR_null)
```

plot : 

graph fait en discrete (pas continuous), voir si changer ou pas
geom_text(aes(label = Treatment_ul, y = -0.5), position = position_dodge(width = 0.7))

```{r : graph survie en fct traitement}
data$Treatment_ul <- as.factor(data$Treatment_ul)
ggplot(data, aes(x = Treatment_ul, fill = factor(Survived))) +
  geom_bar(position = "fill", stat = "count") +
  labs(title = "Survival depending on the treatment",
       x = "Treatment",
       y = "Number of ticks") +
  scale_fill_manual(values = c("0" = "darkred", "1" = "darkolivegreen3"), 
                    labels = c("Died", "Survived")) +
  theme_minimal()
```
 

##        4. Analyse temps de survie 

#kruskal 

```{r Kruskal-Wallis tps survie}
kruskal.test(Survival_time ~ Treatment_ul, data = data)
kruskal.test(Survival_time ~ Realised_dose, data = data)
dunn_tpsS <- dunn.test(data$Survival_time, data$Treatment_ul)
print("Dunn's test results for survival time:")
print(dunn_tpsS)
```

#traitement 

```{r : log temps de survie}
survobj <- with(data, Surv(Survival_time,Survived2))
survtest <- coxph(survobj~Treatment_ul,
  data=numeric_data)
survtest
cox.zph(survtest)
survdiff(survobj~Treatment_ul, data=numeric_data)
```

#dose réelle

```{r : log temps de survie}
survobj <- with(data, Surv(Survival_time,Survived2))
survtest <- coxph(survobj~ealized,
  data=numeric_data)
survtest
cox.zph(survtest)
survdiff(survobj~Treatment_ul, data=numeric_data)
```

pour dose réelle changer le type de graphique car trop d'info, faire une courbe ? 

```{r courble tps survie Kaplan-Meier}
fit <- survfit(Surv(Survival_time, Survived2) ~ Trt_categ, data = Daily_tick_monitoring)

# Tracé du graphique de survie
ggsurvplot(fit, 
           data = Daily_tick_monitoring, 
           pval = FALSE,  
           conf.int = FALSE, 
           legend.title = "Treatment",  
           risk.table = FALSE,  # Afficher le tableau de risque
           xlab = "Time",  
           ylab = "Survival proportion",  
           ggtheme = theme_minimal()) 
```

##            5. Analyse succès de mue 

#kruskal 

```{r Kruskal-Wallis mue}
kruskal.test(Mue ~ Treatment_ul, data = data)
kruskal.test(Mue ~ Realised_dose, data = data)
```

#traitement 

```{r mue~traitement}
model_mue <- glmer(Mue ~ Treatment_ul + (1 | Plaque), 
               family = binomial,
               data = data)
model_mue_null <- glmer(Mue ~ 1 + (1 | Plaque), 
               family = binomial,
               data = data)
anova(model_mue, model_mue_null)
```
plaque NA ? ca veut dire quoi ? 

```{r}
data$Treatment_ul <- as.factor(data$Treatment_ul)
ggplot(data, aes(x = Treatment_ul, fill = factor(Mue))) +
  geom_bar(position = "fill", stat = "count") +
  labs(title = "Molting sucess depending on the treatment",
       x = "Treatment",
       y = "number of ticks") +
  scale_fill_manual(values = c("0" = "darkred", "1" = "darkolivegreen3" ), 
                    labels = c("Did not molt", "Molted")) +
  theme_minimal() 
```

#dose réelle

```{r mue~dose réelle}
model_mue2 <- glmer(Mue ~ Realised_dose + (1 | Plaque), 
               family = binomial,
             data = data)
model_mue2_null <- glmer(Mue ~ 1 + (1 | Plaque), 
               family = binomial,
             data = data)
anova(model_mue2, model_mue2_null)
```


##            6. Analyse temps de mue 

#kruskal 

```{r Kruskal-Wallis tps mue}
kruskal.test(Time_to_moult ~ Treatment_ul, data = data)
kruskal.test(Time_to_moult ~ Realised_dose, data = data)
```

#traitement 

voir pour mettre une famille mais fit pas bien ? enle
```{r tps mue~traitement}
model_tps_mue <- lmer(log(Time_to_moult) ~ Treatment_ul + (1 | Plaque), 
             data = data)
model_tps_mue_null <- lmer(log(Time_to_moult) ~ 1 + (1 | Plaque), 
             data = data)
anova(model_tps_mue, model_tps_mue_null)
```
lmer car familly gaussian 

```{r test overdispersion tps mue}
library(DHARMa)
simulateResiduals(model_tps_mue, plot = TRUE)
```

#dose réelle

```{r tps mue~dose réelle}
model_tps_mue <- lmer(log(Time_to_moult) ~ Realised_dose + (1 | Plaque),
             data = data)
model_tps_mue_dr <- lmer(log(Time_to_moult) ~ 1 + (1 | Plaque),
             data = data)
anova(model_tps_mue, model_tps_mue_dr)
```
utilization de lmer car family = gaussian, repetitif avec glmer 

```{r}
ggplot(data, aes(x= Treatment_ul, y= Time_to_moult, fill=Treatment_ul)) +
  geom_point() +
  geom_boxplot(alpha=0.5) +
  labs(title = "Molting time depending on the treatment",
       x = "Treatment",
       y = "Time to molt")+ 
  theme(plot.title = element_text(size = 9),
        legend.position = "none",
        axis.text.x = element_blank())
```


##            7. Analyse bloodmeal size en fonction traitement

#kruskal 

```{r Kruskal-Wallis bloodmeal size}
kruskal.test(Bloodmeal_size ~ Treatment_ul, data = data)
```

#model 

```{r Bloodmeal size}
model4 <- glmer(Bloodmeal_size2 ~ Realised_dose + (1 | Plaque), 
             data = data, family = gaussian)
summary(model4)
AIC(model4)
hist(data$Bloodmeal_size2)
simulateResiduals(model4)

```
 

##        8. Analyse Longueure de mue 

impact sur l'augmentation de la taille, faire longueur et largeur séparé ? ou faire "superficie" ?
changer la famille du model ?

```{r kruskal wallis taille mue}
kruskal.test(Ratio_long ~ Treatment_ul, data = data)
kruskal.test(Ratio_long ~ Realised_dose, data = data)
```
```{r dunn taille mue}
dunn_Mue <- dunn.test(data$Ratio_long, data$Treatment_ul)
print("Dunn's test results for molt size:")
print(dunn_Survived)
```


#traitement

```{r ratio longueure trt}
ratiolong1 <- glmer(Ratio_long ~ Treatment_ul + (1 | Plaque), 
              data = data, family = gaussian)
summary(ratiolong1)
anova(ratiolong1)
AIC(ratiolong1)
hist(data$Ratio_long)
```
quelle famille choisir ? 

# dose réelle

```{r ratio longueure dose}
ratiolong2 <- glmer(Ratio_long ~ Realised_dose + (1 | Plaque), 
             data = data)
summary(ratiolong2)
anova(ratiolong2)
AIC(ratiolong2)
```
AIC plus petit pour GLMM (de 1), choisir ce model ? mais pas de famille choisi

```{r ratio longueure dose}
ratiolong <- glmer(Ratio_long ~ Treatment_ul + Long_bf_mue + (1 | Plaque), 
             data = data)
summary(ratiolong)
ratiolongbf <- glm(Ratio_long ~ Treatment_ul + (1 | Plaque), 
             data = data)
summary(ratiolongbf)
anova(ratiolong)
anova(ratiolongbf)
AIC(ratiolong)
AIC(ratiolongbf)
```

```{r}
ggplot(data, aes(x= Treatment_ul, y= Ratio_long)) +
  geom_point() +
  geom_boxplot(alpha=0.5) +
  labs(title = "Taille de mue en fonction du traitement",
       x = " ",
       y = "Taille en mm")+ 
  theme(plot.title = element_text(size = 9),
        legend.position = "none",
        axis.text.x = element_blank()) +
 facet_wrap(~Treatment_ul)
```

##        9. Analyse largeur de mue 


```{r kruskal wallis larg mue}
kruskal.test(Ratio_larg ~ Treatment_ul, data = data)
kruskal.test(Ratio_larg ~ Realised_dose, data = data)
```

# traitement 

```{r glm larg mue T}
glmlarg <- glmer(Ratio_larg ~ Treatment_ul + (1 | Plaque), 
             data = data, family = gamma)
summary(glmlarg)
AIC(glmlarg)
hist(Ratio_larg)
```

# dose réelle 

```{r glm larg mue dr}
glmlarg2 <- glmer(Ratio_larg ~ Realised_dose + (1 | Plaque), 
             data = data)
summary(glmlarg2)
AIC(glmlarg2)
```


## autre 

tentative de graph ? garder ou pas ? 
```{r}
attach(data)
plot(Realised_dose,Survival_time,pch=21,col="blue",bg="red")
plot(Realised_dose,Time_to_moult,pch=21,col="blue",bg="red")
```

